<?php

class MessageJob extends Job
{
    public $messageid;
    public $start;
    public $batch;

    public function __construct($mid, $start, $batch)
    {
        parent::__construct();
        $this->messageid = $mid;
        $this->jobid = "MES_{$this->cid}_{$mid}_{$start}_{$batch}_" . microtime(TRUE);
        $this->jobtype = self::TYPE_MESSAGE;
        $this->start = $start;
        $this->batch = $batch;
    }

    public function saveAsCreateType()
    {
        parent::saveAsCreateType(); // TODO: Change the autogenerated stub
    }


    protected function processAsCreateType()
    {
        global $_COMPANY, $_ZONE;
        /* @var Company $_COMPANY */
        $app_type = $_ZONE->val('app_type');
        $reply_addr = '';

        // Fetch the message to process
        $messages = self::DBGet("SELECT `recipients`,`additional_recipients`,`subject`, `content_replyto_email`, `from_name`, `message`,groupids,is_admin FROM messages WHERE messageid='{$this->messageid}' AND companyid='{$this->cid}' AND isactive IN (1,5)");

        if (count($messages) <= 0) {
            return; // no matching message found
        }

        $message_model = Message::Hydrate($this->messageid, $messages[0]);

        // If the message is not a admin message, then set the from address to be Group From address. Also update replyto
        $group_logo = "";
        if (!$messages[0]['is_admin']) {
            $groupids = explode(',', $messages[0]['groupids']);
            if (count($groupids) == 1) {
                $group = Group::GetGroup($groupids[0]);
                $reply_addr = $group->val('replyto_email');
                $group_logo = $group->val('groupicon'); 
            }
        }

        if (!empty($messages[0]['content_replyto_email'])) { // Specific reply to address overrides all others
            $reply_addr = $messages[0]['content_replyto_email'];
        }

        $from = html_entity_decode($messages[0]['from_name']);
        $subject = html_entity_decode($messages[0]['subject']);
        $message = $messages[0]['message'];

        $message = EmailHelper::OutlookFixes($message);

        $email_logger = null;
        $email_open_pixel = '';
        if ($_COMPANY->getAppCustomization()['messaging']['email_tracking']['enabled']) {
            $domain = $_COMPANY->getAppDomain($app_type);
            $email_logger = EmailLog::GetOrCreateEmailLog($domain, EmailLog::EMAILLOG_SECTION_TYPES['message'], $this->messageid, 1, 'Email', $this->createdby);
            if ($_COMPANY->getAppCustomization()['messaging']['email_tracking']['track_urls']) {
                $message = $email_logger->updateHtmlToTrackUrlClicks($message);
            }
            $email_open_pixel = $email_logger->getEmailOpenPixelTemplate();
        }
        $email_content = EmailHelper::GetEmailTemplateForMessage('', '', $message, $email_open_pixel, $message_model,$group_logo); 
        $additional_recipients = array();
        if ($messages[0]['additional_recipients']) {
            $additional_recipients = explode(',', $messages[0]['additional_recipients']);
        }
        $email_list = explode(',', $messages[0]['recipients']);

        $email_list = array_unique(array_merge($email_list, $additional_recipients));
        $job_email_list = array_slice($email_list, $this->start, $this->batch);

        // Update Message Status
        self::DBMutate("UPDATE `messages` SET `isactive`=1 WHERE `messageid`={$this->messageid}");

        foreach ($job_email_list as $email) {
            $email_content_custom = $email_content; // Init it to the template
            $enc_tracking_id = '';
            if ($email_logger) {
                $touser = User::GetUserByEmail($email);
                $enc_tracking_id = $email_logger->addOrGetRcptByUseridOrEmail(($touser ? $touser->id() : 0), $email);
                $email_content_custom = str_replace('___EMAILLOG_ENC_USER___', $enc_tracking_id, $email_content_custom);
            }

            $_COMPANY->emailSend2($from, $email, $subject, $email_content_custom, $app_type, $reply_addr);
        }
    }

    public function sendForReview(string $toList, string $reviewNote, string $subjectPrefix = 'Review: ')
    {

        global $_COMPANY, $_ZONE;
        /* @var Company $_COMPANY */

        $app_type = $_ZONE->val('app_type');
        $reply_addr = '';
        // Validate the Message exists
        $messages = self::DBGet("SELECT * FROM `messages` WHERE companyid='{$this->cid}' AND `messageid`='{$this->messageid}'");

        if (count($messages) <= 0) {
            return;
        } //no matching valid message found

        $message_model = Message::Hydrate($messages[0]['messageid'], $messages[0]);

        // If the message is not a admin message, then set the from address to be Group From address. Also update replyto
        $group_logo = "";
        if (!$messages[0]['is_admin']) {
            $groupids = explode(',', $messages[0]['groupids']);
            if (count($groupids) == 1) {
                $group = Group::GetGroup($groupids[0]);
                $reply_addr = $group->val('replyto_email');
                $group_logo = $group->val('groupicon');
            }
        }

        if (!empty($messages[0]['content_replyto_email'])) { // Specific reply to address overrides all others
            $reply_addr = $messages[0]['content_replyto_email'];
        }

        $members = empty($toList) ? array() : explode(',', $toList);
        if (count($members) <= 0) {
            return;
        } //no users to notify

        $message = $messages[0]['message'];
        $message = EmailHelper::OutlookFixes($message);

        $email_settings = $_ZONE->val('email_settings');

        $from = html_entity_decode($messages[0]['from_name']);

        if (empty($subject)) {
            $subject = $subjectPrefix . html_entity_decode($messages[0]['subject']);
        }
        $content_subheader = "";
        if (!empty($reviewNote)) {
            $content_subheader = '<div style="margin-top:10px;margin-bottom:10px; background-color:#80808026; padding:20px;"><b>Note:&nbsp;</b>' . stripcslashes($reviewNote) . '</div><br>';
        }

        $email_content = EmailHelper::GetEmailTemplateForMessage($content_subheader, '', $message, '', $message_model,$group_logo);

        $attachments = array();
        if ($email_settings >= 2) {
            $_COMPANY->emailSend2($from, $toList, $subject, $email_content, $app_type, $reply_addr, '', $attachments);
        }
    }


    public function cancelAllPendingJobs()
    {
        $delete_jobid = "MES_{$this->cid}_{$this->messageid}_%";
        return self::DBUpdate("UPDATE jobs SET status=100, processedby='CANCELLED', processedon=now() WHERE companyid='{$this->cid}' AND (jobid like '{$delete_jobid}' AND jobtype={$this->jobtype} AND status=0)");
    }
}